trigger:
  branches:
    include:
      - master
      - staging
      - trying
  tags:
   include:
     - v*.*.*

jobs:
  - job:
    pool:
      vmImage: $(VM_IMAGE)
    variables:
      VM_IMAGE: ubuntu-latest
      TOOLCHAIN: 1.42.0
      CARGO_NET_RETRY: 3
      CARGO_HTTP_CHECK_REVOKE: false
    strategy:
      matrix:
        xtensa-esp32-none-elf:           { TARGET: xtensa-esp32-none-elf }
        xtensa-esp8266-none-elf:         { TARGET: xtensa-esp8266-none-elf }
    timeoutInMinutes: 360
    steps:
      - template: ci/azure-install-rust.yml
      - bash: echo "##vso[task.setvariable variable=OS]$(echo "${AGENT_OS}" | tr '[:upper:]' '[:lower:]')"
        displayName: Set OS Variable
      - bash: echo "##vso[task.setvariable variable=BRANCH]${BUILD_SOURCEBRANCH##refs/heads/}"
        displayName: Set BRANCH Variable
        condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/')
      - bash: echo "##vso[task.setvariable variable=TAG]${BUILD_SOURCEBRANCH##refs/tags/}"
        displayName: Set TAG Variable
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      - bash: cargo test
        displayName: Run unit tests
        timeoutInMinutes: 5
      - bash: ./build-docker-image.sh "${TARGET}"
        displayName: Build Docker Image
        timeoutInMinutes: 360
        condition: eq(variables['OS'], 'linux')
      - bash: ci/test.sh
        displayName: Test
      - bash: cargo publish
        displayName: Publish on crates.io
        env:
          CARGO_REGISTRY_TOKEN: $(CARGO_REGISTRY_TOKEN)
        condition: and(startsWith(variables['TAG'], 'v'), eq(variables['CRATES_IO_PUBLISH'], '1'))
      - bash: ci/build_release.sh
        displayName: Build Release
        condition: eq(variables['DEPLOY'], '1')
      - task: ArchiveFiles@2
        inputs:
          includeRootFolder: false
          archiveType: tar
          tarCompression: gz
          archiveFile: $(Build.ArtifactStagingDirectory)/cross-$(TAG)-$(TARGET).tar.gz
          verbose: true
        condition: eq(variables['DEPLOY'], '1')
      - task: GithubRelease@0
        displayName: Create GitHub Release
        inputs:
          githubConnection: github
          assets: $(Build.ArtifactStagingDirectory)/cross-$(TAG)-$(TARGET).tar.gz
          assetUploadMode: replace
          action: edit
          tag: $(TAG)
        condition: and(startsWith(variables['TAG'], 'v'), eq(variables['DEPLOY'], '1'))
      - task: Docker@2
        displayName: Log into Docker Hub
        inputs:
          containerRegistry: docker
          command: login
        condition: and(or(eq(variables['BRANCH'], 'master'), startsWith(variables['TAG'], 'v')), eq(variables['OS'], 'linux'))
      - bash: ci/docker_push.sh
        displayName: Push Image to Docker Hub
        condition: and(or(eq(variables['BRANCH'], 'master'), startsWith(variables['TAG'], 'v')), eq(variables['OS'], 'linux'))
